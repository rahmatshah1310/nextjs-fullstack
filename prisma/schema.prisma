// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  password      String?
  company       String?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoiceItems InvoiceItem[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  phone     String?
  address   String?
  profileImageUrl String?  
  cloudinaryId    String?   
  status    String    @default("active") // active/inactive
  isDeleted Boolean   @default(false)

  invoices  Invoice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  Int           @unique @default(autoincrement())
  customerId     String
  customer       Customer      @relation(fields: [customerId], references: [id])

  items          InvoiceItem[]
  totalAmount    Float
  discount       Float?
  tax            Float?
  paymentStatus  PaymentStatus @default(PENDING)

  isFinalized    Boolean       @default(false)
  isDeleted      Boolean       @default(false)

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   Int
  quantity    Int
  price       Float
  discount    Float?
  tax         Float?
  total       Float

  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
