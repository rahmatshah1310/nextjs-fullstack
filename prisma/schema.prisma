// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  password      String?
  company       String?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  phone     String?
  address   String?
  profileImageUrl String?  
  cloudinaryId    String?   
  status    String    @default("active") // active/inactive
  isDeleted Boolean   @default(false)

  invoices  Invoice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  quantity     Int      @default(0)
  imageUrl     String?
  cloudinaryId String?
  category     String?
  discount     Decimal? @db.Decimal(5, 2) // percentage
  isActive     Boolean  @default(true)
  sizes        String[]
  colors       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  invoiceItems InvoiceItem[]
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber Int           @unique @default(autoincrement())
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id])
  items         InvoiceItem[]
  totalAmount   Decimal       @db.Decimal(12, 2)
  discount      Decimal?      @db.Decimal(5, 2)
  tax           Decimal?      @db.Decimal(5, 2)
  paymentStatus PaymentStatus @default(PENDING)
  isFinalized   Boolean       @default(false)
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model InvoiceItem {
  id         String   @id @default(cuid())
  invoiceId  String
  productId  String
  productName String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  discount   Decimal? @db.Decimal(5, 2)
  tax        Decimal? @db.Decimal(5, 2)
  total      Decimal  @db.Decimal(12, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}


enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
